Question 1 - Variables

Create a variable and set it equal to 'variable'.
  
  variable = variable

What are some different data types? Write a few examples.
  
  - strings
  - numbers (integers and floats)
  - booleans
  - arrays
  - hashes
  - symbols

Question 2 - Hashes and Arrays

Open irb. We're going to make some cars. Create two hashes, one for each car, with the following attributes: wheels, max_speed, color

  car_1 = { wheels: 4, max_speed: 160, color: 'blue' }
  car_2 = { wheels: 3, max_speed: 40, color: 'yellow' }

Create an array that contains both cars.

  car_array = [car_1, car_2]

How do we use the array to access the second car?

  car_array[1]

How do we find the second car's color?

  car_array[1][:color]

QUESTION 3 - CLASSES AND METHODS

Create a new file called 'car.rb' with:
a class Car
a method that "paints" a car a new color. 

  see lib/car.rb
  

QUESTION 4 - RSPEC

How do you initialize rspec in a folder? Do it in our cars folder.

  In the terminal enter...
    
    touch Gemfile
    
  Open the Gemfile and enter the following...
    
    source "http://rubygems.org"

    gem rspec

  Back in the terminal enter...

    bundle install

  Finally to initalize rspec enter the following in the terminal...

    rspec --init

  To make a more friendly rspec output we should open our rspec file...

    atom .rspec

  And add...
    
    --format documentation

  To test rspec has been initialized in the folder enter the following in the terminal...

    rspec

  You should get a reply as follows...

     No examples found.

    Finished in 0.00017 seconds (files took 0.3872 seconds to load)
    0 examples, 0 failures


We would ordinarily have written our tests first, then written code to make them pass. Why?

  By writing the tests first we are writing our code to specification.

Create a unit test for our Car class to test our "painting" method. Create an instance_double Driver. A driver should have a car. Write a second test for this and make it pass.

  see lib/car.rb
